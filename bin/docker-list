#!/usr/bin/env bash
#
# Helper script to list docker resources currently running on this machine.
# Adds color output to improve readability.

set -e

CMDS=(
    'container ls -a'
    'image ls' # -a for intermediate images
    'volume ls'
    'network ls'
    'compose ls -a'
)

ANSI_RED="\033[31m"
# ANSI_GREEN="\033[32m"
# ANSI_YELLOW="\033[33m"
ANSI_BLUE="\033[1;34m"
ANSI_DARKGRAY="\033[38;5;241m"
ANSI_GRAY="\033[38;5;246m"
ANSI_RESET="\033[0m"

usage() {
	echo "docker-list -- list running docker resources"
	echo ""
	echo "Usage: $0 [OPTIONS]"
	echo ""
	echo "Options:"
    echo "  --no-color                 Don't add color to docker output"
    echo "  --docker <executable>      Change docker command prefix (default: docker)"
	echo "  --help, -h, help           Show usage help and exit"
    # NOTE: if the available options change, also modify the associated 
    #       _docker-list completion file
}

fail() {
    printf "${ANSI_RED}ERROR: %s$ANSI_RESET\n" "$@" >&2
    exit 1
}

has_argument() {
    [[ ! -z "$2" && "$2" != -* ]];
    # [[ ("$1" == *=* && -n ${1#*=}) || ( ! -z "$2" && "$2" != -*)  ]];
}

opt_no_color=""
opt_docker_bin="docker"

while [ $# -gt 0 ]; do
    case "$1" in
        "-h"|"--help"|"help")
            usage
            exit 0
            ;;


        "--no-color")
            opt_no_color=1
            ;;


        "--docker")
            if ! has_argument $@; then
                usage
                fail "docker binary not specified." >&2
            fi

            opt_docker_bin="$2"
            shift
            ;;

		*)
            usage
            fail "invalid option: $1"
	esac

	shift
done

if [[ -z "$opt_no_color" ]]; then
    cmd_color=""
    cmd_subcommand_color=$ANSI_BLUE
    header_color=$ANSI_DARKGRAY
    body_color=$ANSI_GRAY

    reset_color=$ANSI_RESET
else
    unset ANSI_RED
    unset ANSI_GREEN
    unset ANSI_BLUE
    unset ANSI_YELLOW
    unset ANSI_GRAY
    unset ANSI_DARKGRAY
fi

if [[ ! -x "$opt_docker_bin" ]]; then
    fail "could not find executable docker binary '$opt_docker_bin'"
fi


docker_output_file="$(mktemp)"
for cmd in "${CMDS[@]}"; do
    printf "$header_color>$reset_color $cmd_color$opt_docker_bin$reset_color $cmd_subcommand_color%s$reset_color\n" "$cmd"

    $opt_docker_bin $cmd > "$docker_output_file"
    docker_table_header="$(head -n 1 "$docker_output_file")"
    docker_table_body="$(tail -n +2 "$docker_output_file")"

    # docker_output="$($opt_docker_bin $cmd)"
    # docker_table_header="$(echo "$docker_output" | head -n 1)"
    # docker_table_body="$(echo "$docker_output" | tail -n +2)"

    if [ -n "$docker_table_body" ];then
        printf "$header_color%s$reset_color\n" "$docker_table_header"
        printf "$body_color%s$reset_color\n" "$docker_table_body"
    fi
done
rm "$docker_output_file"
