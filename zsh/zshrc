# vim:ft=zsh:

PERF_TIME_ZSH=

if [ -n "$PERF_TIME_ZSH" ]; then
  zshrc_start_ms=$(date +%s%3N)
fi

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

init_dotfiles_path() {
  # get the absolute path of the symlinked ~/.zshrc file
  local zshrc_path
  zshrc_path=$(readlink -f ~/.zshrc)

  # shortcut to this dotfiles path is $DOTFILES
  # it should be the grandparent directory of the symlink target (this file)
  DOTFILES=$(dirname "$(dirname "$zshrc_path")")
  export DOTFILES
}
init_dotfiles_path

# WARN: all modifications to `fpath` must be done before initializing oh-my-zsh
#  because omz calls compinit (must be called only once)
init_fpath() {
  # #add each topic folder to fpath so that they can add functions and completion scripts
  # for topic_folder ($DOTFILES/*) [ -d $topic_folder ] && fpath=($topic_folder $fpath);

  # NOTE: if the line above (adding topic folders to fpath) is uncommented, should remove dotfiles/functions from fpath below
  local dotfiles_functions="${DOTFILES:-$HOME/code/dotfiles}/functions"
  fpath=("$HOME"/bin "$dotfiles_functions" $fpath)

  # autoload functions defined in ./functions/
  autoload -U "$dotfiles_functions"/*(:t) # The (:t) modifier grabs the basename
}
init_fpath

load_ohmyzsh() {
  # Set name of the theme to load --- if set to "random", it will
  # load a random theme each time oh-my-zsh is loaded, in which case,
  # to know which specific one was loaded, run: echo $RANDOM_THEME
  # See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
  ZSH_THEME="powerlevel10k/powerlevel10k"

  # Set list of themes to pick from when loading at random
  # Setting this variable when ZSH_THEME=random will cause zsh to load
  # a theme from this variable instead of looking in $ZSH/themes/
  # If set to an empty array, this variable will have no effect.
  # ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

  # Uncomment the following line to use case-sensitive completion.
  # CASE_SENSITIVE="true"

  # Uncomment the following line to use hyphen-insensitive completion.
  # Case-sensitive completion must be off. _ and - will be interchangeable.
  HYPHEN_INSENSITIVE="true"

  # Uncomment one of the following lines to change the auto-update behavior
  # zstyle ':omz:update' mode disabled  # disable automatic updates
  # zstyle ':omz:update' mode auto      # update automatically without asking
  zstyle ':omz:update' mode reminder  # just remind me to update when it's time

  # Uncomment the following line to change how often to auto-update (in days).
  # zstyle ':omz:update' frequency 13

  # Uncomment the following line if pasting URLs and other text is messed up.
  # DISABLE_MAGIC_FUNCTIONS="true"

  # Uncomment the following line to disable colors in ls.
  # DISABLE_LS_COLORS="true"

  # Uncomment the following line to disable auto-setting terminal title.
  # DISABLE_AUTO_TITLE="true"

  # Uncomment the following line to enable command auto-correction.
  # ENABLE_CORRECTION="true"

  # Uncomment the following line to display red dots whilst waiting for completion.
  # You can also set it to another string to have that shown instead of the default red dots.
  # e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
  # Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
  # COMPLETION_WAITING_DOTS="true"

  # Uncomment the following line if you want to disable marking untracked files
  # under VCS as dirty. This makes repository status check for large repositories
  # much, much faster.
  # DISABLE_UNTRACKED_FILES_DIRTY="true"

  # Uncomment the following line if you want to change the command execution time
  # stamp shown in the history command output.
  # You can set one of the optional three formats:
  # "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
  # or set a custom format using the strftime function format specifications,
  # see 'man strftime' for details.
  # HIST_STAMPS="mm/dd/yyyy"

  # Would you like to use another custom folder than $ZSH/custom?
  # ZSH_CUSTOM=/path/to/new-custom-folder

  # Which plugins would you like to load?
  # Standard plugins can be found in $ZSH/plugins/
  # Custom plugins may be added to $ZSH_CUSTOM/plugins/
  # Example format: plugins=(rails git textmate ruby lighthouse)
  # Add wisely, as too many plugins slow down shell startup.
  plugins=(
      git
      # npm
      nvm
      rust
      python
      # poetry
      pyenv
      aws # Available commands documentation: $ZSH/plugins/aws/README.md (asp, asr, aws_profiles, ...)
      gcloud
      # kubectl

      ### custom plugins (added in $ZSH_CUSTOM/plugins)
      zsh-autosuggestions
      # zsh-yarn-completions
      # llm-tools
  )

  ### Standard plugin configuration
  zstyle ':omz:plugins:nvm' autoload yes
  # zstyle ':omz:plugins:nvm' silent-autoload yes # optionally remove the output generated by NVM when autoloading
  # zstyle ':omz:plugins:nvm' lazy yes
  # zstyle ':omz:plugins:nvm' lazy-cmd eslint prettier typescript ...

  ### Custom plugin configuration
  ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#4a465c"
  ZSH_AUTOSUGGEST_STRATEGY=(history completion)
  # ZSH_AUTOSUGGEST_STRATEGY=(llm_tools history completion)
  ### End custom plugin configuration

  source "$ZSH/oh-my-zsh.sh"


  if [ -n "$PERF_TIME_ZSH" ]; then
  # `date +%s%3N`
    echo "[zshrc] ohmyzsh loaded in $(($(date +%s%3N) - $zshrc_start_ms))ms"
  fi
}

#############################################
########## END OF oh-my-zsh config ##########
#############################################

# your project folder that we can `c [tab]` to
export PROJECTS=~/code

# Stash your environment variables in ~/.localrc. This means they'll stay out
# of your main dotfiles repository (which may be public, like this one), but
# you'll have access to them in your scripts.
#
# NOTE: use the conventional prefix LOCAL_* for env vars possibly defined in
#       ~/.localrc
if [[ -a ~/.localrc ]]
then
  source ~/.localrc
fi

# all of the zsh files in topic directories
typeset -U config_files

# exclude bin/* and scripts/*
old_extended_glob=$options[extended_glob]
setopt extended_glob
config_files=("$DOTFILES"/*/*.zsh~"$DOTFILES"/bin/*~"$DOTFILES"/scripts/*)
if [ "$old_extended_glob" != on ]
then
  unsetopt extended_glob
fi

# load the path files
for file in ${(M)config_files:#*/path.zsh}
do
  source "$file"
done



### powerlevel10k config after setting important env vars (POWERLEVEL9K_CONFIG_FILE)

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
p10k_config_file="$HOME/.p10k.zsh"
[[ -f "$p10k_config_file" ]] && source "$p10k_config_file"

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

### Load omz after p10k config for faster prompt
load_ohmyzsh

##########

# use vim keybinds
bindkey -v
# Add shortcut to enter normal mode
bindkey -M viins 'Ã¹' vi-cmd-mode
# # reduce delay to enter normal mode using ESC
# export KEYTIMEOUT=1

##########


# load everything but the path and completion files
for file in ${${config_files:#*/path.zsh}:#*/completion.zsh}
do
  source "$file"
done

# initialize autocomplete here, otherwise functions won't be loaded
# autoload -U +X bashcompinit && bashcompinit ## TODO: is bashcompinit necessary ?
autoload -Uz compinit && compinit

# load every completion after autocomplete loads
for file in ${(M)config_files:#*/completion.zsh}
do
  source "$file"
done

unset config_files


if [ -n "$PERF_TIME_ZSH" ]; then
  echo "zshrc loaded in $(($(date +%s%3N) - $zshrc_start_ms))ms"
fi
unset PERF_TIME_ZSH
unset zshrc_end_ms
unset zshrc_start_ms
