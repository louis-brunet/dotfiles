#!/usr/bin/env bash

# Docker Cleanup Script
# This script removes unused Docker resources to free up disk space

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if Docker is running
check_docker() {
    if ! docker info >/dev/null 2>&1; then
        print_error "Docker is not running or not accessible"
        exit 1
    fi
}

# Function to show disk usage before cleanup
show_initial_usage() {
    print_status "Current Docker disk usage:"
    docker system df
    echo
}

# Function to remove stopped containers
cleanup_containers() {
    print_status "Removing stopped containers..."

    stopped_containers=$(docker ps -aq --filter "status=exited")
    if [ -n "$stopped_containers" ]; then
        docker rm "$stopped_containers"
        print_success "Removed stopped containers"
    else
        print_warning "No stopped containers to remove"
    fi
}

# Function to remove dangling images
cleanup_dangling_images() {
    print_status "Removing dangling images..."

    dangling_images=$(docker images -qf "dangling=true")
    if [ -n "$dangling_images" ]; then
        docker rmi "$dangling_images"
        print_success "Removed dangling images"
    else
        print_warning "No dangling images to remove"
    fi
}

# Function to remove unused images
cleanup_unused_images() {
    print_status "Removing unused images..."

    # Get images that are not used by any container
    unused_images=$(docker images --format "table {{.Repository}}:{{.Tag}}\t{{.ID}}" |
        grep -v "REPOSITORY" |
        while read repo id; do
            if [ -z "$(docker ps -a --filter ancestor="$id" -q)" ]; then
                echo "$id"
            fi
        done)

    if [ -n "$unused_images" ]; then
        echo "$unused_images" | xargs -r docker rmi
        print_success "Removed unused images"
    else
        print_warning "No unused images to remove"
    fi
}

# Function to remove unused volumes
cleanup_volumes() {
    print_status "Removing unused volumes..."

    unused_volumes=$(docker volume ls -qf "dangling=true")
    if [ -n "$unused_volumes" ]; then
        docker volume rm $unused_volumes
        print_success "Removed unused volumes"
    else
        print_warning "No unused volumes to remove"
    fi
}

# Function to remove unused networks
cleanup_networks() {
    print_status "Removing unused networks..."

    # Get custom networks that are not in use
    unused_networks=$(docker network ls --filter "type=custom" -q |
        while read net; do
            if [ -z "$(docker network inspect "$net" --format '{{range .Containers}}{{.}}{{end}}')" ]; then
                echo "$net"
            fi
        done)

    if [ -n "$unused_networks" ]; then
        echo "$unused_networks" | xargs -r docker network rm
        print_success "Removed unused networks"
    else
        print_warning "No unused networks to remove"
    fi
}

# Function to prune build cache
cleanup_build_cache() {
    print_status "Removing build cache..."
    docker builder prune -f
    print_success "Removed build cache"
}

# Function to show final disk usage
show_final_usage() {
    echo
    print_status "Docker disk usage after cleanup:"
    docker system df
    echo
}

# Main cleanup function
main() {
    print_status "Starting Docker cleanup..."
    echo

    # Check if Docker is available
    check_docker

    # Show initial usage
    show_initial_usage

    # Perform cleanup operations
    cleanup_containers
    cleanup_dangling_images
    cleanup_unused_images
    cleanup_volumes
    cleanup_networks
    cleanup_build_cache

    # Show final usage
    show_final_usage

    print_success "Docker cleanup completed!"
}

# Parse command line arguments
FORCE=false
AGGRESSIVE=false

while [[ $# -gt 0 ]]; do
    case $1 in
    -f | --force)
        FORCE=true
        shift
        ;;
    -a | --aggressive)
        AGGRESSIVE=true
        shift
        ;;
    -h | --help)
        echo "Docker Cleanup Script"
        echo
        echo "Usage: $0 [OPTIONS]"
        echo
        echo "Options:"
        echo "  -f, --force       Skip confirmation prompts"
        echo "  -a, --aggressive  Use docker system prune --all (removes all unused images)"
        echo "  -h, --help        Show this help message"
        echo
        echo "This script removes:"
        echo "  - Stopped containers"
        echo "  - Dangling images"
        echo "  - Unused images (not referenced by any container)"
        echo "  - Unused volumes"
        echo "  - Unused networks"
        echo "  - Build cache"
        exit 0
        ;;
    *)
        print_error "Unknown option: $1"
        echo "Use -h or --help for usage information"
        exit 1
        ;;
    esac
done

# Confirmation prompt unless force flag is used
if [ "$FORCE" != true ]; then
    echo "This script will remove unused Docker resources including:"
    echo "- Stopped containers"
    echo "- Dangling and unused images"
    echo "- Unused volumes"
    echo "- Unused networks"
    echo "- Build cache"
    echo
    read -p "Do you want to continue? (y/N): " -r
    # read -p "Do you want to continue? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_warning "Cleanup cancelled"
        exit 0
    fi
fi

# Use aggressive cleanup if flag is set
if [ "$AGGRESSIVE" = true ]; then
    print_warning "Using aggressive cleanup (docker system prune --all)"
    docker system prune --all --volumes -f
    print_success "Aggressive cleanup completed!"
else
    main
fi
